
/*
 stepper motor model no. is 28BYJ-48
 * It has 5.56 degree step angle
 * So one step is 5.56 degree
 * Here we have used in half step mode for better resolution, 
 * so our resolution is 2.8 degree for one step.
 * CW and ACW are functions for 1 step = 2.8 degree.
 * 
 
 */
 
/*******************************************************************************/
///////////////////////Include Section/////////////////////////////////////////////////////

#include <xc.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <GenericTypeDefs.h>
#include "usart_pic16.h"
#include "LCD.h"

// Configuration Byte
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = ON       // Power-up Timer Enable bit (PWRT enabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)
#define _XTAL_FREQ	16000000
//#define TR RC4
//#define EC RB1
#define RELAY RD0
#define SW RB1
//int flag = 0;
//int width = 0;
void main()
{
	//Initialize USART with baud rate 9600

// 	unsigned int digit1, digit2, digit3, digit4;
    const char arr[10] = "\r\n+CMTI:";
    unsigned char data[50]={0};
    unsigned char ch;
    unsigned char var;
    unsigned char count = 0;   
    unsigned  int i = 0;
    unsigned int flag = 0;      // Set debug flag to test cmti or cmgr
    unsigned int nflag = 0;
    unsigned int n1= 0;
    unsigned int k = 0;
    unsigned int digit1, digit2; 
    unsigned  int i1 = 0; 
    unsigned int disp_flag = 0;
     
    USARTInit(9600);
    __delay_ms(20);
    OPTION_REGbits.nRBPU = 0;
    WPUB = 0XFF;
    ANSELH = 0x00;
 	TRISBbits.TRISB1 = 1;
	TRISCbits.TRISC4 = 0;   
    TRISDbits.TRISD0 = 0;
  //  TR = 0;
    LCDEnable();
    LCDInitialize();
    LCDWriteString("Initializing..");
    __delay_ms(30);
     
    //LCDWriteString("Testing LCD");
    //__delay_ms(30);
    LCDClear();
  //  USARTWriteLine("AT\r\n");
    __delay_ms(500);
    //USARTWriteLine("CW\r\n");
    //CW(1);
    //USARTWriteLine("ACW\r\n");
    //ACW(1);
    //USARTWriteLine("START\r\n");
//
      USARTWriteString("AT+CMGD=1,4\r\n");
      __delay_ms(6000);
      USARTFlushBuffer();
      __delay_ms(600);
 //     USARTWriteString("AT+CMGR=1\r\n");
 
while(1)
    {
   uint8_t n = USARTDataAvailable();
   
     if (n!= 0)
        {    
         
         ch = USARTReadData();
         
         if (ch == '\n')
         {
             data[i] = ch;
             i++;
//             USARTWriteLine("nflag is");
//             USARTWriteInt(nflag,1);
             if(flag == 0 )   
          {
//              USARTWriteString("data is");
//              USARTWriteLine(data);
//              USARTWriteString("arr is");
//              USARTWriteLine(arr);

              if (strncmp(data,arr,8) == 0 )
            {
              LCDClear();
              LCDWriteString("NEW SMS");
              USARTFlushBuffer();
              __delay_ms(600);
              flag =1;
              i = 0;
              i1=0;
              USARTWriteString("AT+CMGR=1\r\n");
            }
          }
          else if(flag == 1)
           {
            i1++;
            i = 0;
            LCDWriteData(i1+48);
            if(i1 == 3)
            {
               LCDClear();
               LCDWriteString("data is ");
               LCDWriteData(data[0]);
               LCDWriteData(data[1]);
     
            
            n1 = ((data[0]-48)*10)+(data[1]-48);
//            LCDWriteData(data[0]);
//            LCDWriteData(data[1]);
            __delay_ms(1000);
            if(n1 != 0)
            {
               USARTWriteLine("AT+CMGD=1,4\r\n");
               __delay_ms(3000);
                LCDClear();
                LCDWriteString("Credited for ");
                LCDWriteData(data[0]);
                LCDWriteData(data[1]);
                LCDRow2();
                LCDWriteString("Ltrs");
                __delay_ms(3000);
                LCDClear();
                USARTFlushBuffer();
                __delay_ms(300);
              i1 = 0;
              flag = 0;
              RELAY = 1;
            }
            
            }
            
            for(int j=0;j<50;j++)
            data[j]=0;
         }
         }
         else
            {
//            USARTWriteLine("Loop"); 
             __delay_ms(10);
             data[i] = ch;
             i++;
            }
        }
     
              if(SW == 0 && n1>0)
          {
  
                disp_flag = 0;  
                n1--;
                RELAY = 1;
                LCDClear();
         		unsigned long temp = n1;
                digit1 = (unsigned int) (temp / 10);
                temp %= 10;								// Calculate digit1
                digit2 = (unsigned int) (temp);			// Calculate digit2
                LCDWriteString("Current amount: ");
                LCDRow2();
                LCDWriteData(digit1+48);
                LCDWriteData(digit2+48);

                __delay_ms(1000);
        
//              USARTWriteInt(n1,2);
          }
              else
                  RELAY = 0;


            if(n1 == 0)
               {
                   if(!disp_flag)
                   {
                    RELAY = 0;
                    LCDClear();
                    LCDWriteString("ACC is NIL ");
                    LCDRow2();
                    LCDWriteString("Please Recharge ");
                    disp_flag = 1;
                   }
               }
    }
}
